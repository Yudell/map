export type Noise1Fn = (x: number) => number;
export type Noise2Fn = (x: number, y: number) => number;
export type Noise3Fn = (x: number, y: number, z: number) => number;
export type Noise4Fn = (x: number, y: number, z: number, w: number) => number;
export interface Options {
    amplitude: number;
    frequency: number;
    octaves: number;
    persistence: number;
    scale?: (x: number) => number;
}
export declare function makeCuboid(width: number, height: number, depth: number, noise3: Noise3Fn, { amplitude, frequency, octaves, persistence, scale, }?: Partial<Options>): number[][][];
export declare function makeCylinderSurface(circumference: number, height: number, noise3: Noise3Fn, { amplitude, frequency, octaves, persistence, scale, }?: Partial<Options>): number[][];
export declare function makeLine(length: number, noise1: Noise1Fn, { amplitude, frequency, octaves, persistence, scale, }?: Partial<Options>): number[];
export declare function makeRectangle(width: number, height: number, noise2: Noise2Fn, { amplitude, frequency, octaves, persistence, scale, }?: Partial<Options>): number[][];
export declare function makeSphereSurface(circumference: number, noise3: Noise3Fn, { amplitude, frequency, octaves, persistence, scale, }?: Partial<Options>): number[][];
